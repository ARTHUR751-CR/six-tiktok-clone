// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  phone         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  followersCount Int       @default(0)
  followingCount Int       @default(0)
  verified       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  videos   Video[]
  likes    Like[]
  comments Comment[]
  follows  Follow[] @relation("UserFollows")
  followers Follow[] @relation("UserFollowers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id          String   @id @default(cuid())
  videoUrl    String
  thumbnailUrl String?
  description String?
  duration    Int?     // em segundos
  views       Int      @default(0)
  likes       Int      @default(0)
  shares      Int      @default(0)
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  videoLikes Like[]
  comments   Comment[]
  hashtags   VideoHashtag[]
}

model Like {
  id      String @id @default(cuid())
  userId  String
  videoId String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  String
  videoId String
  parentId String? // Para respostas a coment√°rios

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  video    Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Hashtag {
  id        String   @id @default(cuid())
  name      String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())

  videos VideoHashtag[]
}

model VideoHashtag {
  id        String @id @default(cuid())
  videoId   String
  hashtagId String

  video   Video   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)

  @@unique([videoId, hashtagId])
}

model OtpCode {
  id          String   @id @default(cuid())
  phoneNumber String
  code        String
  expiresAt   DateTime
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@unique([phoneNumber, code])
}
