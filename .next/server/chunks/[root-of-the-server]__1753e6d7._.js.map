{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\ndeclare global {\n  // Allow global variable in dev mode to prevent multiple instances.\n  var prisma: PrismaClient | undefined\n}\n\nconst prisma = global.prisma || new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') global.prisma = prisma\n\nexport default prisma\n"],"names":[],"mappings":";;;AAAA;;AAOA,MAAM,SAAS,OAAO,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhD,wCAA2C,OAAO,MAAM,GAAG;uCAE5C","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from 'next-auth'\nimport GoogleProvider from 'next-auth/providers/google'\nimport CredentialsProvider from 'next-auth/providers/credentials'\nimport { PrismaAdapter } from '@auth/prisma-adapter'\nimport prisma from '@/lib/prisma'\n\nconst handler = NextAuth({\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n    CredentialsProvider({\n      id: 'phone',\n      name: 'Phone',\n      credentials: {\n        phoneNumber: { label: 'Phone Number', type: 'text' },\n        otp: { label: 'OTP', type: 'text' },\n      },\n      async authorize(credentials) {\n        if (!credentials?.phoneNumber || !credentials?.otp) {\n          return null\n        }\n\n        try {\n          // Verificar OTP\n          const otpRecord = await prisma.otpCode.findFirst({\n            where: {\n              phoneNumber: credentials.phoneNumber,\n              code: credentials.otp,\n              verified: false,\n              expiresAt: {\n                gt: new Date(),\n              },\n            },\n          })\n\n          if (!otpRecord) {\n            return null\n          }\n\n          // Marcar OTP como verificado\n          await prisma.otpCode.update({\n            where: { id: otpRecord.id },\n            data: { verified: true },\n          })\n\n          // Buscar ou criar usuário\n          let user = await prisma.user.findUnique({\n            where: { phone: credentials.phoneNumber },\n          })\n\n          if (!user) {\n            user = await prisma.user.create({\n              data: {\n                phone: credentials.phoneNumber,\n                name: `Usuário ${credentials.phoneNumber.slice(-4)}`,\n              },\n            })\n          }\n\n          return {\n            id: user.id,\n            name: user.name,\n            email: user.email,\n            image: user.image,\n            phone: user.phone,\n          }\n        } catch (error) {\n          console.error('Error in phone auth:', error)\n          return null\n        }\n      },\n    }),\n  ],\n  session: {\n    strategy: 'jwt',\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.phone = (user as any).phone\n      }\n      return token\n    },\n    async session({ session, token }) {\n      if (token && session.user) {\n        session.user.id = token.sub!\n        session.user.phone = token.phone\n      }\n      return session\n    },\n  },\n  pages: {\n    signIn: '/login',\n  },\n})\n\nexport { handler as GET, handler as POST }\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;IACvB,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE,sHAAA,CAAA,UAAM;IAC7B,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;QACA,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,IAAI;YACJ,MAAM;YACN,aAAa;gBACX,aAAa;oBAAE,OAAO;oBAAgB,MAAM;gBAAO;gBACnD,KAAK;oBAAE,OAAO;oBAAO,MAAM;gBAAO;YACpC;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,eAAe,CAAC,aAAa,KAAK;oBAClD,OAAO;gBACT;gBAEA,IAAI;oBACF,gBAAgB;oBAChB,MAAM,YAAY,MAAM,sHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,SAAS,CAAC;wBAC/C,OAAO;4BACL,aAAa,YAAY,WAAW;4BACpC,MAAM,YAAY,GAAG;4BACrB,UAAU;4BACV,WAAW;gCACT,IAAI,IAAI;4BACV;wBACF;oBACF;oBAEA,IAAI,CAAC,WAAW;wBACd,OAAO;oBACT;oBAEA,6BAA6B;oBAC7B,MAAM,sHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,MAAM,CAAC;wBAC1B,OAAO;4BAAE,IAAI,UAAU,EAAE;wBAAC;wBAC1B,MAAM;4BAAE,UAAU;wBAAK;oBACzB;oBAEA,0BAA0B;oBAC1B,IAAI,OAAO,MAAM,sHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;wBACtC,OAAO;4BAAE,OAAO,YAAY,WAAW;wBAAC;oBAC1C;oBAEA,IAAI,CAAC,MAAM;wBACT,OAAO,MAAM,sHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;4BAC9B,MAAM;gCACJ,OAAO,YAAY,WAAW;gCAC9B,MAAM,CAAC,QAAQ,EAAE,YAAY,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI;4BACtD;wBACF;oBACF;oBAEA,OAAO;wBACL,IAAI,KAAK,EAAE;wBACX,MAAM,KAAK,IAAI;wBACf,OAAO,KAAK,KAAK;wBACjB,OAAO,KAAK,KAAK;wBACjB,OAAO,KAAK,KAAK;oBACnB;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,wBAAwB;oBACtC,OAAO;gBACT;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,KAAK,GAAG,AAAC,KAAa,KAAK;YACnC;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACzB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG;gBAC3B,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;YAClC;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;AACF","debugId":null}}]
}